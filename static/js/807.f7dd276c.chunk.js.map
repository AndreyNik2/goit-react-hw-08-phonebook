{"version":3,"file":"static/js/807.f7dd276c.chunk.js","mappings":"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","sources":["components/contactsbook/Form.js","components/contactsbook/FormEdit.js","components/contactsbook/ContactItem/ContactItem.js","components/contactsbook/ContactList/ContactList.js","components/contactsbook/Filter.js","pages/Contactsbook.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { Button, TextField } from '@mui/material';\n\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required().positive().integer(),\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    // reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  \n\n  const formSubmitHandler = data => {\n    if (contacts.filter(contact => contact.name === data.name).length > 0) {\n      alert(`${data.name}  is already in contacts`);\n      return;\n    }\n    dispatch(addContacts(data));\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.warn('There is no such');\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmitForm = event => {\n    formSubmitHandler({ name, number });\n    resetForm();\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit(handleSubmitForm)}>\n      <TextField\n        {...register('name')}\n        error={errors.name === null}\n        size=\"small\"\n        label=\"Name\"\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        helperText={\n          errors.name?.message &&\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        }\n        required\n        sx={{ mr: 1 }}\n      />\n      <TextField\n        {...register('number')}\n        error={errors.number === null}\n        size=\"small\"\n        label=\"Phone number\"\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        helperText={\n          errors.number?.message &&\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        }\n        required\n        sx={{ mr: 1 }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Add contact\n      </Button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { editContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport Button from '@mui/material/Button';\nimport { TextField } from '@mui/material';\n\nfunction FormEdit({ contact, closeModal }) {\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required().positive().integer(),\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const contactId = contact.id;\n\n  const formSubmitHandler = data => {\n    console.log(data);\n    const otherContacts = contacts.filter(item => item.id !== data.contactId);\n    console.log(otherContacts);\n    if (otherContacts.filter(item => item.name === data.name).length > 0) {\n      alert(`${data.name}  is already in contacts`);\n      return;\n    }\n    dispatch(editContacts(data));\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.warn('There is no such');\n    }\n  };\n\n  const handleSubmitForm = event => {\n    formSubmitHandler({ name, number, contactId });\n    reset();\n    closeModal();\n  };\n\n \n\n  return (\n    <form onSubmit={handleSubmit(handleSubmitForm)}>\n      <TextField\n        {...register('name')}\n        error={errors.name?.message}\n        size=\"small\"\n        label=\"Name\"\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        helperText={\n          errors.name?.message &&\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        }\n        sx={{ mr: 1 }}\n        required\n      />\n      <TextField\n        {...register('number')}\n        error={errors.number?.message}\n        size=\"small\"\n        label=\"Phone number\"\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        helperText={\n          errors.number?.message &&\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        }\n        sx={{ mr: 1 }}\n        required\n      />\n\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Edit contact\n      </Button>\n    </form>\n  );\n}\n\nexport default FormEdit;\n","import { Button, ListItem,  Typography } from '@mui/material';\nimport { useState } from 'react';\nimport Modal from 'react-modal';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operations';\nimport FormEdit from '../FormEdit';\n\nexport const ContactItem = ({ contact }) => {\n  const [isModalOpen, setIsModalOpen] = useState(null);\n  const dispatch = useDispatch();\n\n  const modalStyles = {\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n    },\n  };\n\n  Modal.setAppElement('#root');\n\n  const deleteContact = contactId => {\n    dispatch(deleteContacts(contactId));\n  };\n\n  const onClickEdit = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModalEdit = () => {\n    setIsModalOpen(null);\n  };\n\n  return (\n    <ListItem>\n      <Typography sx={{ mr: 1 }} variant=\"subtitle1\">\n        {contact.name}:\n      </Typography>\n      <Typography sx={{ mr: 1 }} variant=\"subtitle1\">\n        {contact.number}\n      </Typography>\n      <Button\n        sx={{ mr: 1 }}\n        type=\"button\"\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={onClickEdit}\n      >\n        Edit\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => deleteContact(contact.id)}\n        type=\"button\"\n      >\n        Delete\n      </Button>\n      <Modal\n        isOpen={isModalOpen !== null}\n        onRequestClose={closeModalEdit}\n        style={modalStyles}\n        shouldCloseOnEsc={isModalOpen !== null}\n      >\n        <FormEdit\n          contact={contact}\n          closeModal={() => {\n            closeModalEdit();\n          }}\n        />\n      </Modal>\n    </ListItem>\n  );\n};\n","import { getFilter } from 'redux/contacts/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { List } from '@mui/material';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const onFiltrationContact = (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n      contact.name\n        .toLowerCase()\n        .includes(normalizedFilter)\n    );\n    \n    return filteredContacts\n      .sort((firstContact, secondContacts) =>\n        firstContact.name.localeCompare(secondContacts.name)\n      )\n  };\n\n  return (\n    <>\n      <List>\n        {onFiltrationContact(contacts, filter).map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { getFilter, changeFilter } from 'redux/contacts/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, Typography } from '@mui/material';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  return (\n    <>\n      <Typography>Find contacts by name:</Typography>\n      <TextField\n        size=\"small\"\n        label=\"Filter\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { ColorRing } from 'react-loader-spinner';\nimport Form from '../components/contactsbook/Form';\nimport ContactList from '../components/contactsbook/ContactList/ContactList';\nimport Filter from '../components/contactsbook/Filter';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getIsLoading } from 'redux/contacts/contactSlice';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Box, CardMedia, Typography } from '@mui/material';\nimport image from '../images/hexagonal-background.jpg';\n\nfunction ContactsBook() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <CardMedia\n        image={image}\n        padding=\"20px\"\n        sx={{ height: '100vh', marginTop: '5px' }}\n      >\n        <Box width=\"1200px\" margin=\"0 auto\">\n          <Typography variant=\"h6\">Your contactbook</Typography>\n          <Form />\n          <Typography variant=\"h5\">Contacts</Typography>\n          <Filter />\n          <ColorRing\n            visible={Boolean(isLoading)}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n          />\n          <ContactList />\n          {contacts.length === 0 && !isLoading && (\n            <p>Contactlist empty. Please add contact.</p>\n          )}\n        </Box>\n      </CardMedia>\n    </main>\n  );\n}\n\nexport default ContactsBook;\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","schema","yup","shape","required","positive","integer","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","handleChange","event","currentTarget","value","console","warn","onSubmit","data","filter","contact","length","alert","addContacts","TextField","error","size","label","onChange","type","helperText","message","sx","mr","Button","variant","color","closeModal","reset","contactId","id","log","otherContacts","item","editContacts","formSubmitHandler","ContactItem","isModalOpen","setIsModalOpen","Modal","closeModalEdit","ListItem","Typography","onClick","deleteContacts","isOpen","onRequestClose","style","content","top","left","right","bottom","marginRight","transform","shouldCloseOnEsc","getFilter","List","normalizedFilter","toLowerCase","includes","sort","firstContact","secondContacts","localeCompare","onFiltrationContact","map","changeFilter","isLoading","getIsLoading","useEffect","fetchContacts","CardMedia","image","padding","height","marginTop","Box","width","margin","visible","Boolean","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}