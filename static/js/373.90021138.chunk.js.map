{"version":3,"file":"static/js/373.90021138.chunk.js","mappings":"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","sources":["components/FormEdit.js","components/ContactItem.js","components/ContactList.js","components/Filter.js","components/Form.js","pages/Contactsbook.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { editContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport Button from '@mui/material/Button';\nimport { TextField } from '@mui/material';\n\nfunction FormEdit({ contact, closeModal }) {\n  const [name, setName] = useState(contact.name);\n  const [number, setNumber] = useState(contact.number);\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required().positive().integer(),\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const contactId = contact.id;\n\n  const formSubmitHandler = data => {\n    console.log(data);\n    const otherContacts = contacts.filter(item => item.id !== data.contactId);\n    console.log(otherContacts);\n    if (otherContacts.filter(item => item.name === data.name).length > 0) {\n      alert(`${data.name}  is already in contacts`);\n      return;\n    }\n    dispatch(editContacts(data));\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.warn('There is no such');\n    }\n  };\n\n  const handleSubmitForm = event => {\n    formSubmitHandler({ name, number, contactId });\n    reset();\n    closeModal();\n  };\n\n \n\n  return (\n    <form onSubmit={handleSubmit(handleSubmitForm)}>\n      <TextField\n        {...register('name')}\n        error={errors.name?.message}\n        size=\"small\"\n        label=\"Name\"\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        helperText={\n          errors.name?.message &&\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        }\n        sx={{ mr: 1 }}\n        required\n      />\n      <TextField\n        {...register('number')}\n        error={errors.number?.message}\n        size=\"small\"\n        label=\"Phone number\"\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        helperText={\n          errors.number?.message &&\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        }\n        sx={{ mr: 1 }}\n        required\n      />\n\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Edit contact\n      </Button>\n    </form>\n  );\n}\n\nexport default FormEdit;\n","import { Button, ListItem, Typography } from '@mui/material';\nimport { useState } from 'react';\nimport Modal from 'react-modal';\nimport { useDispatch } from 'react-redux';\nimport { deleteContacts } from 'redux/contacts/operations';\nimport FormEdit from './FormEdit';\n\nexport const ContactItem = ({ contact }) => {\n  const [isModalOpen, setIsModalOpen] = useState(null);\n  const dispatch = useDispatch();\n\n  const modalStyles = {\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n    },\n  };\n\n  Modal.setAppElement('#root');\n\n  const deleteContact = contactId => {\n    dispatch(deleteContacts(contactId));\n  };\n\n  const onClickEdit = () => {\n    setIsModalOpen(true);\n  };\n\n  const closeModalEdit = () => {\n    setIsModalOpen(null);\n  };\n\n  return (\n    <ListItem>\n      <Typography\n        sx={{ mr: 1, width: '100px', overflowWrap: 'anywhere' }}\n        variant=\"subtitle1\"\n      >\n        {contact.name}:\n      </Typography>\n      <Typography\n        sx={{ mr: 1, width: '150px', overflowWrap: 'anywhere' }}\n        variant=\"subtitle1\"\n      >\n        {contact.number}\n      </Typography>\n      <Button\n        sx={{ mr: 1 }}\n        type=\"button\"\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={onClickEdit}\n      >\n        Edit\n      </Button>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => deleteContact(contact.id)}\n        type=\"button\"\n      >\n        Delete\n      </Button>\n      <Modal\n        isOpen={isModalOpen !== null}\n        onRequestClose={closeModalEdit}\n        style={modalStyles}\n        shouldCloseOnEsc={isModalOpen !== null}\n      >\n        <FormEdit\n          contact={contact}\n          closeModal={() => {\n            closeModalEdit();\n          }}\n        />\n      </Modal>\n    </ListItem>\n  );\n};\n","import { getFilter } from 'redux/contacts/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { List } from '@mui/material';\nimport { ContactItem } from './ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const onFiltrationContact = (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    return filteredContacts.sort((firstContact, secondContacts) =>\n      firstContact.name.localeCompare(secondContacts.name)\n    );\n  };\n\n  return (\n    <>\n      <List>\n        {onFiltrationContact(contacts, filter).map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { getFilter, changeFilter } from 'redux/contacts/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, Typography } from '@mui/material';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  return (\n    <>\n      <Typography>Find contacts by name:</Typography>\n      <TextField\n        size=\"small\"\n        label=\"Filter\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { Button, TextField } from '@mui/material';\n\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    number: yup.number().required().positive().integer(),\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    // reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  \n\n  const formSubmitHandler = data => {\n    if (contacts.filter(contact => contact.name === data.name).length > 0) {\n      alert(`${data.name}  is already in contacts`);\n      return;\n    }\n    dispatch(addContacts(data));\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.warn('There is no such');\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmitForm = event => {\n    formSubmitHandler({ name, number });\n    resetForm();\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit(handleSubmitForm)}>\n      <TextField\n        {...register('name')}\n        error={Boolean(errors.name?.message)}\n        size=\"small\"\n        label=\"Name\"\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        helperText={\n          errors.name?.message &&\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        }\n        required\n        sx={{ mr: 1 }}\n      />\n      <TextField\n        {...register('number')}\n        error={Boolean(errors.number?.message)}\n        size=\"small\"\n        label=\"Phone number\"\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        helperText={\n          errors.number?.message &&\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        }\n        required\n        sx={{ mr: 1 }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        Add contact\n      </Button>\n    </form>\n  );\n}\n\nexport default Form;\n","import { useEffect } from 'react';\nimport { ColorRing } from 'react-loader-spinner';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getIsLoading } from 'redux/contacts/contactSlice';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Box, CardMedia, Typography } from '@mui/material';\nimport image from '../images/hexagonal-background.jpg';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Form from 'components/Form';\n\nfunction ContactsBook() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <CardMedia\n        image={image}\n        padding=\"20px\"\n        sx={{ height: '100vh', marginTop: '5px' }}\n      >\n        <Box width=\"1200px\" margin=\"0 auto\">\n          <Typography variant=\"h6\">Your contactbook</Typography>\n          <Form />\n          <Typography variant=\"h5\">Contacts</Typography>\n          <Filter />\n          <ColorRing\n            visible={Boolean(isLoading)}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n          />\n          <ContactList />\n          {contacts.length === 0 && !isLoading && (\n            <p>Contactlist empty. Please add contact.</p>\n          )}\n        </Box>\n      </CardMedia>\n    </main>\n  );\n}\n\nexport default ContactsBook;\n"],"names":["contact","closeModal","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","schema","yup","shape","required","positive","integer","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","contactId","id","handleChange","event","currentTarget","value","console","warn","onSubmit","data","log","otherContacts","filter","item","length","alert","editContacts","formSubmitHandler","TextField","error","message","size","label","onChange","type","helperText","sx","mr","Button","variant","color","ContactItem","isModalOpen","setIsModalOpen","Modal","closeModalEdit","ListItem","Typography","width","overflowWrap","onClick","deleteContacts","isOpen","onRequestClose","style","content","top","left","right","bottom","marginRight","transform","shouldCloseOnEsc","getFilter","List","normalizedFilter","toLowerCase","includes","sort","firstContact","secondContacts","localeCompare","onFiltrationContact","map","changeFilter","addContacts","Boolean","isLoading","getIsLoading","useEffect","fetchContacts","CardMedia","image","padding","height","marginTop","Box","margin","visible","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}